name: Build Desktop Apps

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.7'
        channel: 'stable'
        
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
      
    - name: Create Windows platform support
      run: flutter create --platforms=windows .
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      
    - name: Build Windows app
      run: flutter build windows --release
      
    - name: Create Windows installer (optional)
      run: |
        # Install NSIS if you want to create an installer
        # You can uncomment and modify this section later
        # choco install nsis -y
        # makensis installer_script.nsi
      
    - name: Archive Windows build
      uses: actions/upload-artifact@v4
      with:
        name: kioju-link-manager-windows
        path: build/windows/x64/runner/Release/
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.7'
        channel: 'stable'
        
    - name: Enable macOS desktop
      run: flutter config --enable-macos-desktop
      
    - name: Create macOS platform support
      run: flutter create --platforms=macos .
      
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      
    - name: Setup code signing (if certificates available)
      if: ${{ secrets.MACOS_CERTIFICATE != '' }}
      run: |
        # Create temporary keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        
        # Decode and import certificate
        echo "${{ secrets.MACOS_CERTIFICATE }}" | base64 --decode > certificate.p12
        
        # Create keychain and import certificate
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
        security import certificate.p12 -P "${{ secrets.MACOS_CERTIFICATE_PWD }}" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security list-keychain -d user -s "$KEYCHAIN_PATH"
        
        # Clean up certificate file
        rm certificate.p12
        
        # Set signing identity for codesign
        echo "CODESIGN_IDENTITY=${{ secrets.MACOS_SIGNING_IDENTITY }}" >> $GITHUB_ENV
        
    - name: Build macOS app
      run: flutter build macos --release
      
    - name: Sign app with hardened runtime (if certificate available)
      if: ${{ secrets.MACOS_CERTIFICATE != '' }}
      run: |
        echo "Signing with hardened runtime and entitlements: $CODESIGN_IDENTITY"
        # Sign all frameworks and dylibs first
        find build/macos/Build/Products/Release/kioju_link_manager_flutter.app/Contents/Frameworks -name "*.dylib" -o -name "*.framework" | while read file; do
          echo "Signing: $file"
          codesign --force --options runtime --timestamp \
            --sign "$CODESIGN_IDENTITY" \
            "$file" || echo "Warning: Failed to sign $file (may not require signing)"
        done
        
        # Sign the main app bundle with entitlements and hardened runtime
        echo "Signing main app bundle..."
        codesign --force --options runtime --timestamp \
          --entitlements macos/Runner/Release.entitlements \
          --sign "$CODESIGN_IDENTITY" \
          --deep \
          build/macos/Build/Products/Release/kioju_link_manager_flutter.app
      
    - name: Apply ad-hoc signature (if no certificate)
      if: ${{ secrets.MACOS_CERTIFICATE == '' }}
      run: |
        echo "Applying ad-hoc signature for testing purposes"
        codesign --force --deep --sign - build/macos/Build/Products/Release/kioju_link_manager_flutter.app
        
    - name: Verify code signature
      run: |
        codesign --verify --deep --strict --verbose=2 build/macos/Build/Products/Release/kioju_link_manager_flutter.app
        codesign -dv --verbose=4 build/macos/Build/Products/Release/kioju_link_manager_flutter.app
        
    - name: Notarize app (if certificates available)
      if: ${{ secrets.MACOS_CERTIFICATE != '' && secrets.APPLE_ID != '' }}
      run: |
        # Create a ZIP for notarization
        cd build/macos/Build/Products/Release
        zip -r kioju_link_manager_flutter.zip kioju_link_manager_flutter.app
        
        # Submit for notarization
        xcrun notarytool submit kioju_link_manager_flutter.zip \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait
        
        # Staple the notarization ticket
        xcrun stapler staple kioju_link_manager_flutter.app
        
        # Clean up ZIP
        rm kioju_link_manager_flutter.zip
        
    - name: Create DMG (optional)
      run: |
        # Install create-dmg for creating DMG files
        # brew install create-dmg
        # create-dmg --volname "Kioju Link Manager" --window-size 800 400 --icon-size 100 --app-drop-link 600 200 "kioju-link-manager.dmg" "build/macos/Build/Products/Release/"
      
    - name: Clean up keychain
      if: always() && secrets.MACOS_CERTIFICATE != ''
      run: |
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security delete-keychain "$KEYCHAIN_PATH" || true
        
    - name: Archive macOS build
      uses: actions/upload-artifact@v4
      with:
        name: kioju-link-manager-macos
        path: build/macos/Build/Products/Release/
        retention-days: 30

  create-release:
    if: github.event_name == 'release'
    needs: [build-windows, build-macos]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: kioju-link-manager-windows
        path: ./windows-build
        
    - name: Download macOS artifact
      uses: actions/download-artifact@v4
      with:
        name: kioju-link-manager-macos
        path: ./macos-build
        
    - name: Create Windows ZIP
      run: |
        cd windows-build
        zip -r ../kioju-link-manager-windows.zip .
        
    - name: Create macOS ZIP
      run: |
        cd macos-build
        zip -r ../kioju-link-manager-macos.zip .
        
    - name: Upload Windows release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./kioju-link-manager-windows.zip
        asset_name: kioju-link-manager-windows.zip
        asset_content_type: application/zip
        
    - name: Upload macOS release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./kioju-link-manager-macos.zip
        asset_name: kioju-link-manager-macos.zip
        asset_content_type: application/zip